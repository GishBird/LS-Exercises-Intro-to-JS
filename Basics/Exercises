//1.  Concatenate two or more strings
'John' + '' +'Doe'
//John Doe

//2. Use the arithmetic operators to determine the individual digits of a 4-digit number like 4936:

let number = 4936
let ones = number % 10

let tens = (number - ones) / 10;
let modTens=tens%10;

let hundreds = (tens - modTens) / 10;
let modHundreds = hundreds%10;

let thousands = (hundreds -modHundreds) / 10;
let modThousands = thousands%10;

console.log(`The number in the thousands place is ${modThousands}. The number in the hudreds place is ${modHundreds}. The number in the tens place is ${modTens}, and the number in the ones place is ${ones}.`)
//"The number in the thousands place is 4. The number in the hudreds place is 9. The number in the tens place is 3, and the number in the ones place is 6."

//3. Identify the data type for each of the following values:
//by memory or use typeof(operand) 

'true' 
//string
false
//boolean
1.5
//number
2
//number
undefined
//undefined 
{ foo: 'bar' }
//object 

//4.  Explain why this code logs '510' instead of 15.
console.log('5' + 10);
// implicit type coercion- The '5' is a string along with the + operand which changes the number ten to a string which logs 510

//5. Refactor the code from the previous exercise to use explicit coercion, so it logs 15 instead.
console.log('5' + 10);
console.log(Number('5') + 10);

//6. Use the template literal syntax along with the expression Number('5') + 10 to log the following sentence to the console:
The value of 5 + 10 is 15.
console.log(`The value of ${Number('5')} + 10 is 15`);

//7. Will an error occur if you try to access an array element with an index that is greater than or equal to the length of the array? For example:
let foo = ['a', 'b', 'c'];
console.log(foo.length);  // => 3
console.log(foo[3]);      // will this result in an error?
//It will not return an error, it will return undefined 

//8. Create an array named names that contains a list of pet names.
let names = ['asta', 'butterscotch', 'pudding', 'neptune', 'darwin'];

//9.  Create an object names pets.
const pets = {
  asta: 'dog',
  butterscotch: 'cat',
  pudding: 'cat',
  neptune: 'fish',
  darwin: 'lizard'
};
//10. What value does the following expression evaluate to?
'foo' === 'Foo'
//false because case matters when comparing strings

//11. What value does the following expression evaluate to?
parseInt('3.1415')
// it evaluates to 3.  parseInt converts strings that begin with a digit to their numeric equivalent.

//12. What value does the following expression evaluate to?
'12' < '9' 
//because its a string the < evaluates 1 less than 9 and 2 less than 9 so it evaluates to true.  







